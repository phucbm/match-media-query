/**!
 * Match Media Screen v1.0.0
 * @author phucbm
 * @homepage https://github.com/phucbm/match-media-screen
 * @license MIT 2024
 */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var i=t();for(var r in i)("object"==typeof exports?exports:e)[r]=i[r]}}(this,(()=>(()=>{"use strict";var e={666:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debounce=t.getSortedArray=void 0,t.getSortedArray=function(e,t=!0){const i=[...e];return t?i.sort(((e,t)=>e.breakpoint<t.breakpoint?1:-1)):i.sort(((e,t)=>e.breakpoint>t.breakpoint?1:-1)),i},t.debounce=function(e,t=150){let i;return(...r)=>{clearTimeout(i),i=setTimeout((()=>{e.apply(this,r)}),t)}}}},t={};function i(r){var o=t[r];if(void 0!==o)return o.exports;var s=t[r]={exports:{}};return e[r](s,s.exports,i),s.exports}var r={};return(()=>{var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.MatchMediaScreen=void 0;const t=i(666);e.MatchMediaScreen=class{constructor(e){if(this.dev=!0===e.dev,this.object=e.object||void 0,this.object){if(this.onMatched=e.onMatched,this.onUpdate=e.onUpdate,window.addEventListener("resize",(0,t.debounce)((()=>{"function"==typeof this.onUpdate&&this.onUpdate(this.currentObject)}),this.debounce)),!this.object.responsive)return this.currentObject={type:"no-responsive",lastBreakpoint:void 0,breakpoint:-1,object:this.mergeObject(-1,this.object)},"function"==typeof this.onMatched&&this.onMatched(this.currentObject),void(this.dev&&console.warn("Property object must have responsive array."));this.isInherit=void 0===e.isInherit||e.isInherit,this.debounce=e.debounce||100,this.currentObject={type:"",breakpoint:void 0,object:{}},this.object.responsive=(0,t.getSortedArray)(this.object.responsive),this.match(),window.addEventListener("resize",(0,t.debounce)((()=>this.match()),this.debounce))}else console.error("Property object:{} must be provided.")}match(){if(!this.currentObject)return;let e=!1;if(this.object.responsive)for(let t=0;t<this.object.responsive.length;t++){const i=this.object.responsive[t];if(e=matchMedia(this.getQuery(t)).matches,e){this.currentObject.breakpoint!==i.breakpoint&&(this.currentObject={type:"responsive",lastBreakpoint:this.currentObject.breakpoint,breakpoint:i.breakpoint,object:this.mergeObject(i.breakpoint,i.settings)},"function"==typeof this.onMatched&&this.onMatched(this.currentObject));break}}!e&&this.currentObject&&-1!==this.currentObject.breakpoint&&(this.currentObject={type:"default",lastBreakpoint:this.currentObject.breakpoint,breakpoint:-1,object:this.mergeObject(-1,this.object)},"function"==typeof this.onMatched&&this.onMatched(this.currentObject))}getQuery(e){if(!this.object||!this.object.responsive)return;let t=`screen and (max-width:${this.object.responsive[e].breakpoint}px)`;const i=this.object.responsive[e+1];return i&&(t+=` and (min-width:${i.breakpoint+1}px)`),t}mergeObject(e,i){let r=Object.assign({},i);if(this.isInherit&&-1!==e){const i=(0,t.getSortedArray)(this.object.responsive,!1);for(let t=0;t<i.length;t++)i[t].breakpoint>e&&(r=Object.assign(Object.assign({},i[t].settings),r))}return r=Object.assign(Object.assign({},this.object),r),delete r.responsive,r}}})(),r})()));